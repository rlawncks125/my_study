{"version":3,"sources":["webpack:///./src/views/기타/함수_Promise_리턴값.vue","webpack:///./src/views/기타/함수_Promise_리턴값.vue?5311","webpack:///./src/views/기타/함수_Promise_리턴값.vue?eeba"],"names":["type","f","x","y","click","p","d","setup","funX","funY","Ffn","Func","proX","proY","Pfn","DX","DY","Dfn","data","sum","avg","console","log","then","callFunc","Promise","resolve","setTimeout","render"],"mappings":"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","file":"js/chunk-2d0c26a7.11fab0a2.js","sourcesContent":["<template>\n  <div>리턴값으로 함수호출</div>\n  <input type=\"text\" v-model.number=\"f.x\" />\n  <input type=\"text\" v-model.number=\"f.y\" />\n  <button @click=\"f.click\">클릭</button>\n  <br />\n  <p>Promise</p>\n  <input type=\"text\" v-model.number=\"p.x\" />\n  <input type=\"text\" v-model.number=\"p.y\" />\n  <button @click=\"p.click\">클릭</button>\n  <br />\n  <p>function & Promise</p>\n  <input type=\"text\" v-model.number=\"d.x\" />\n  <input type=\"text\" v-model.number=\"d.y\" />\n  <button @click=\"d.click\">클릭</button>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, toRefs } from \"vue\";\n\nexport default defineComponent({\n  setup() {\n    const { x: funX, y: funY, Func: Ffn } = functionReturn();\n    const { x: proX, y: proY, Func: Pfn } = PromiseReturn();\n    const { x: DX, y: DY, Func: Dfn } = DoubleReturn();\n    const data = reactive({\n      f: {\n        x: funX,\n        y: funY,\n        click: () => {\n          Ffn(({ sum, avg }) => {\n            console.log(`sum : ${sum}, avg : ${avg}`);\n          });\n        },\n      },\n      p: {\n        x: proX,\n        y: proY,\n        click: () => {\n          Pfn().then(({ sum, avg }) =>\n            console.log(`Promise , Sum : ${sum} Avg : ${avg}`)\n          );\n        },\n      },\n      d: {\n        x: DX,\n        y: DY,\n        click: () => {\n          Dfn(({ sum, avg }) => {\n            console.log(`Function | sum : ${sum} avg : ${avg}`);\n          }).then(({ sum, avg }) =>\n            console.log(`promise | sum :${sum}, avg: ${avg}`)\n          );\n        },\n      },\n    });\n\n    return { ...toRefs(data) };\n  },\n});\n\n// 함수로 인자값 넘겨주기\nconst functionReturn = () => {\n  const data = reactive({\n    x: 0,\n    y: 0,\n  });\n\n  interface IFuncParms {\n    sum: number;\n    avg: number;\n  }\n  type CallFunction = (parms: IFuncParms) => void;\n  interface IFunc {\n    (callFunc: CallFunction): void;\n  }\n  const Func: IFunc = (callFunc: CallFunction) => {\n    const sum = data.x + data.y;\n    const avg = data.x / data.y;\n    callFunc({ sum, avg });\n  };\n\n  return { ...toRefs(data), Func };\n};\n\n// 프로미스로 값넘겨주기\nconst PromiseReturn = () => {\n  const data = reactive({\n    x: 0,\n    y: 0,\n  });\n\n  interface IPromiseParms {\n    sum: number;\n    avg: number;\n  }\n  interface IFunc {\n    (): Promise<IPromiseParms>;\n  }\n  const Func: IFunc = (): Promise<IPromiseParms> => {\n    const sum = data.x + data.y;\n    const avg = data.x / data.y;\n\n    return new Promise<IPromiseParms>((resolve) => {\n      setTimeout(() => {\n        ///\n        resolve({ sum, avg });\n      }, 1000);\n    });\n  };\n\n  return { ...toRefs(data), Func };\n};\n\n// 두개다 값넘겨주기\nconst DoubleReturn = () => {\n  const data = reactive({\n    x: 0,\n    y: 0,\n  });\n  // type & interface 정의\n  interface IFuncParms {\n    sum: number;\n    avg: number;\n  }\n  type CallFunction = (parms: IFuncParms) => void;\n  interface IFunc {\n    (callFunc: CallFunction): Promise<IFuncParms>;\n  }\n\n  // 넘겨줄 함수\n  const Func: IFunc = (callFunc: CallFunction): Promise<IFuncParms> => {\n    const sum = data.x + data.y;\n    const avg = data.x / data.y;\n    // 함수로 인자값 넘겨주기\n    callFunc({ sum, avg });\n\n    // 프로미스로 값넘겨주기\n    return new Promise<IFuncParms>((resolve) => {\n      setTimeout(() => {\n        resolve({ sum, avg });\n      }, 1000);\n    });\n  };\n  return { ...toRefs(data), Func };\n};\n</script>\n\n<style scoped></style>\n","\nimport { defineComponent, reactive, toRefs } from \"vue\";\n\nexport default defineComponent({\n  setup() {\n    const { x: funX, y: funY, Func: Ffn } = functionReturn();\n    const { x: proX, y: proY, Func: Pfn } = PromiseReturn();\n    const { x: DX, y: DY, Func: Dfn } = DoubleReturn();\n    const data = reactive({\n      f: {\n        x: funX,\n        y: funY,\n        click: () => {\n          Ffn(({ sum, avg }) => {\n            console.log(`sum : ${sum}, avg : ${avg}`);\n          });\n        },\n      },\n      p: {\n        x: proX,\n        y: proY,\n        click: () => {\n          Pfn().then(({ sum, avg }) =>\n            console.log(`Promise , Sum : ${sum} Avg : ${avg}`)\n          );\n        },\n      },\n      d: {\n        x: DX,\n        y: DY,\n        click: () => {\n          Dfn(({ sum, avg }) => {\n            console.log(`Function | sum : ${sum} avg : ${avg}`);\n          }).then(({ sum, avg }) =>\n            console.log(`promise | sum :${sum}, avg: ${avg}`)\n          );\n        },\n      },\n    });\n\n    return { ...toRefs(data) };\n  },\n});\n\n// 함수로 인자값 넘겨주기\nconst functionReturn = () => {\n  const data = reactive({\n    x: 0,\n    y: 0,\n  });\n\n  interface IFuncParms {\n    sum: number;\n    avg: number;\n  }\n  type CallFunction = (parms: IFuncParms) => void;\n  interface IFunc {\n    (callFunc: CallFunction): void;\n  }\n  const Func: IFunc = (callFunc: CallFunction) => {\n    const sum = data.x + data.y;\n    const avg = data.x / data.y;\n    callFunc({ sum, avg });\n  };\n\n  return { ...toRefs(data), Func };\n};\n\n// 프로미스로 값넘겨주기\nconst PromiseReturn = () => {\n  const data = reactive({\n    x: 0,\n    y: 0,\n  });\n\n  interface IPromiseParms {\n    sum: number;\n    avg: number;\n  }\n  interface IFunc {\n    (): Promise<IPromiseParms>;\n  }\n  const Func: IFunc = (): Promise<IPromiseParms> => {\n    const sum = data.x + data.y;\n    const avg = data.x / data.y;\n\n    return new Promise<IPromiseParms>((resolve) => {\n      setTimeout(() => {\n        ///\n        resolve({ sum, avg });\n      }, 1000);\n    });\n  };\n\n  return { ...toRefs(data), Func };\n};\n\n// 두개다 값넘겨주기\nconst DoubleReturn = () => {\n  const data = reactive({\n    x: 0,\n    y: 0,\n  });\n  // type & interface 정의\n  interface IFuncParms {\n    sum: number;\n    avg: number;\n  }\n  type CallFunction = (parms: IFuncParms) => void;\n  interface IFunc {\n    (callFunc: CallFunction): Promise<IFuncParms>;\n  }\n\n  // 넘겨줄 함수\n  const Func: IFunc = (callFunc: CallFunction): Promise<IFuncParms> => {\n    const sum = data.x + data.y;\n    const avg = data.x / data.y;\n    // 함수로 인자값 넘겨주기\n    callFunc({ sum, avg });\n\n    // 프로미스로 값넘겨주기\n    return new Promise<IFuncParms>((resolve) => {\n      setTimeout(() => {\n        resolve({ sum, avg });\n      }, 1000);\n    });\n  };\n  return { ...toRefs(data), Func };\n};\n","import { render } from \"./함수_Promise_리턴값.vue?vue&type=template&id=71ec1d92\"\nimport script from \"./함수_Promise_리턴값.vue?vue&type=script&lang=ts\"\nexport * from \"./함수_Promise_리턴값.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}