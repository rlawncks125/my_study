{"version":3,"sources":["webpack:///./src/views/CSS-views/CSS함수.vue","webpack:///./src/views/CSS-views/CSS함수.vue?9ff3","webpack:///./src/views/CSS-views/CSS함수.vue?47d8"],"names":["class","title","code","transForm","math","filter","color","image","content","Shape","setup","data","render"],"mappings":"qJACE,eAAgC,MAA5BA,MAAM,YAAW,UAAM,G,EAC3B,eAAM,mB,EACN,eAAM,mB,EACN,eAAW,oB,iBAEQ,iB,iBAIA,Y,iBAIA,c,iBAIA,a,iBAIA,a,iBAIA,U,iBACE,U,iHA1BrB,EACA,EACA,EACA,EACA,eAGe,QAFFC,MAAK,gBAAC,iBAAa,C,MACnBC,KAAI,gBAAC,iBAAe,C,8BAAZ,EAAAC,WAAS,O,MAE9B,eAGe,QAFFF,MAAK,gBAAC,iBAAQ,C,MACdC,KAAI,gBAAC,iBAAU,C,8BAAP,EAAAE,MAAI,O,MAEzB,eAGe,QAFFH,MAAK,gBAAC,iBAAU,C,MAChBC,KAAI,gBAAC,iBAAY,C,8BAAT,EAAAG,QAAM,O,MAE3B,eAGe,QAFFJ,MAAK,gBAAC,iBAAS,C,MACfC,KAAI,gBAAC,iBAAW,C,8BAAR,EAAAI,OAAK,O,MAE1B,eAGe,QAFFL,MAAK,gBAAC,iBAAS,C,MACfC,KAAI,gBAAC,iBAAW,C,8BAAR,EAAAK,OAAK,O,MAE1B,eAIe,QAHFN,MAAK,gBAAC,iBAAM,C,MACZO,QAAO,gBAAC,iBAAM,C,MACdN,KAAI,gBAAC,iBAAW,C,8BAAR,EAAAO,OAAK,O,uCCxBb,iBAAgB,CAC7BC,MAD6B,WAE3B,IAAMC,EAAO,eAAS,CACpBR,UACE,eAAY,2SAWdC,KAAM,eAAY,6JASlBC,OAAQ,eAAY,8UAmBpBC,MACE,eAAY,qJAIdC,MACE,eAAY,8WAWdE,MAAO,eAAY,yDAKrB,yBAAY,eAAOE,OClEvB,EAAOC,OAASA,EAED","file":"js/chunk-2d0cedbb.1e9c7a50.js","sourcesContent":["<template>\n  <h1 class=\"div-line\">CSS 함수</h1>\n  <hr />\n  <br />\n  <div></div>\n  <code-convert>\n    <template #title> Transform 함수</template>\n    <template #code>{{ transForm }} </template>\n  </code-convert>\n  <code-convert>\n    <template #title> Math 함수</template>\n    <template #code>{{ math }} </template>\n  </code-convert>\n  <code-convert>\n    <template #title>filter 함수 </template>\n    <template #code>{{ filter }} </template>\n  </code-convert>\n  <code-convert>\n    <template #title>color 함수 </template>\n    <template #code>{{ color }} </template>\n  </code-convert>\n  <code-convert>\n    <template #title>image 함수 </template>\n    <template #code>{{ image }} </template>\n  </code-convert>\n  <code-convert>\n    <template #title>도형 함수 </template>\n    <template #content>잘안쓸거같음</template>\n    <template #code>{{ Shape }} </template>\n  </code-convert>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive, toRefs } from \"vue\";\nimport { codeProcess } from \"../../components/codeConvert.vue\";\n\nexport default defineComponent({\n  setup() {\n    const data = reactive({\n      transForm:\n        codeProcess(`matrix() : 2D 변환 행렬 정의 matrix( scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY() )\n\n        perspective() : 사이의 거리를 설정하는 변환을 구체화함\n\n        rotate() : 회전하는 변환을 정의\n\n        scale() : 크기를 조정하는 변환을 정의\n\n        skew() : 비스듬히 움직이는 변환을 정의\n\n        translate() : 수평/수직 으로 위치시킨다.`),\n      math: codeProcess(`calc() : 사직 계삭을 수행\n\n        max() : 제일 큰값 적용\n\n        min() : 제일 작은값 적용\n\n        abs() : 절대값으로 반환\n\n        sign() : 양수일경우 1 음수일경우 -1 , 0일경우 0을 반환`),\n      filter: codeProcess(`blur() : 이미지에 흐림을 적용\n\n    brightness() : 이미지의 밝기를 적용\n\n    contrast() : 이미지의 대비를 조정\n\n    drop-shadow() : 이미지에 새도우 효과를 적용\n\n    grayscale() : 회색 이미지 정도를 적용\n\n    hue-rotate() : 색상의 내용을 회전 = 색바뀜\n\n    invert() : 색상을 반전 시킴\n\n    opacity() : 투명성을 적용\n\n    saturate() : 이미지를 과포화 시키거나 불포화시킴\n\n    sepia() : 노란/갈색 으로 보이게 하는 정도`),\n      color:\n        codeProcess(`hsl[a]() : H = 색상(r=0deg=360deg,b=240deg,g=120deg) , S = 포화도 , L = 백분율 , A = 투명성\n\n    rgb[a]() : r = red , g = green , b = blue , a = 투명성\n    `),\n      image:\n        codeProcess(`conic-gradient() : 중앙점 기준으로 색전환이 회전하는 그라데이션\n\n    linear-gradient() : 직선을 따라 둘 이상의 색상 사이에서 점진적인 전환으로 구성된 이미지\n\n    radial-gradient() : 원점에서 방사되어 원또는 타원일수있다. 두개 이상의 생상 사이의 점진적인 전환으로 구성된 이미지\n\n    repeating-linear-gradient() : 반복적인 선형 그라데이션\n\n    repeating-radial-gradient() : 원점에서 방사되어 반복적인 그라데이션\n\n    repeating-conic-gradient() : 중심점을 중심으로 반복적으로 회전하는 그라데이션`),\n      Shape: codeProcess(`circle()\n    ellipse()\n    inset()\n    polygon()`),\n    });\n    return { ...toRefs(data) };\n  },\n});\n</script>\n\n<style scoped></style>\n","\nimport { defineComponent, reactive, toRefs } from \"vue\";\nimport { codeProcess } from \"../../components/codeConvert.vue\";\n\nexport default defineComponent({\n  setup() {\n    const data = reactive({\n      transForm:\n        codeProcess(`matrix() : 2D 변환 행렬 정의 matrix( scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY() )\n\n        perspective() : 사이의 거리를 설정하는 변환을 구체화함\n\n        rotate() : 회전하는 변환을 정의\n\n        scale() : 크기를 조정하는 변환을 정의\n\n        skew() : 비스듬히 움직이는 변환을 정의\n\n        translate() : 수평/수직 으로 위치시킨다.`),\n      math: codeProcess(`calc() : 사직 계삭을 수행\n\n        max() : 제일 큰값 적용\n\n        min() : 제일 작은값 적용\n\n        abs() : 절대값으로 반환\n\n        sign() : 양수일경우 1 음수일경우 -1 , 0일경우 0을 반환`),\n      filter: codeProcess(`blur() : 이미지에 흐림을 적용\n\n    brightness() : 이미지의 밝기를 적용\n\n    contrast() : 이미지의 대비를 조정\n\n    drop-shadow() : 이미지에 새도우 효과를 적용\n\n    grayscale() : 회색 이미지 정도를 적용\n\n    hue-rotate() : 색상의 내용을 회전 = 색바뀜\n\n    invert() : 색상을 반전 시킴\n\n    opacity() : 투명성을 적용\n\n    saturate() : 이미지를 과포화 시키거나 불포화시킴\n\n    sepia() : 노란/갈색 으로 보이게 하는 정도`),\n      color:\n        codeProcess(`hsl[a]() : H = 색상(r=0deg=360deg,b=240deg,g=120deg) , S = 포화도 , L = 백분율 , A = 투명성\n\n    rgb[a]() : r = red , g = green , b = blue , a = 투명성\n    `),\n      image:\n        codeProcess(`conic-gradient() : 중앙점 기준으로 색전환이 회전하는 그라데이션\n\n    linear-gradient() : 직선을 따라 둘 이상의 색상 사이에서 점진적인 전환으로 구성된 이미지\n\n    radial-gradient() : 원점에서 방사되어 원또는 타원일수있다. 두개 이상의 생상 사이의 점진적인 전환으로 구성된 이미지\n\n    repeating-linear-gradient() : 반복적인 선형 그라데이션\n\n    repeating-radial-gradient() : 원점에서 방사되어 반복적인 그라데이션\n\n    repeating-conic-gradient() : 중심점을 중심으로 반복적으로 회전하는 그라데이션`),\n      Shape: codeProcess(`circle()\n    ellipse()\n    inset()\n    polygon()`),\n    });\n    return { ...toRefs(data) };\n  },\n});\n","import { render } from \"./CSS함수.vue?vue&type=template&id=4c49f3c4\"\nimport script from \"./CSS함수.vue?vue&type=script&lang=ts\"\nexport * from \"./CSS함수.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}