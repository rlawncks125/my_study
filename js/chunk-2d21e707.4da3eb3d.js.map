{"version":3,"sources":["webpack:///./src/views/VUEX-view/파일정리.vue","webpack:///./src/views/VUEX-view/파일정리.vue?e038","webpack:///./src/views/VUEX-view/파일정리.vue?2701"],"names":["class","items","item","key","id","title","content","code","setup","render"],"mappings":"yIACE,eAA0B,MAAtBA,MAAM,YAAU,S,EACpB,eAAM,mB,EACN,eAAM,mB,iHAFN,EACA,EACA,G,mBACA,eAMM,2BANc,EAAAC,OAAK,SAAbC,G,wBAAZ,eAMM,OANsBC,IAAKD,EAAKE,I,CACpC,eAIe,QAHFC,MAAK,gBAAC,iBAAgB,C,8BAAbH,EAAKG,OAAK,OACnBC,QAAO,gBAAC,iBAAkB,C,8BAAfJ,EAAKI,SAAO,OACvBC,KAAI,gBAAC,iBAAe,C,8BAAZL,EAAKK,MAAI,O,2CCJnB,iBAAgB,CAC7BC,MAD6B,WAE3B,IAAMP,EAAQ,eAAS,CACrB,CACEI,MAAO,WACPE,KAAM,eAAY,++EAiGtB,MAAO,CAAEN,YCvGb,EAAOQ,OAASA,EAED","file":"js/chunk-2d21e707.4da3eb3d.js","sourcesContent":["<template>\n  <h1 class=\"div-line\"></h1>\n  <hr />\n  <br />\n  <div v-for=\"item in items\" :key=\"item.id\">\n    <code-convert>\n      <template #title>{{ item.title }} </template>\n      <template #content>{{ item.content }}</template>\n      <template #code>{{ item.code }} </template>\n    </code-convert>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive } from \"vue\";\nimport { codeProcess } from \"@/components/codeConvert.vue\";\n\nexport default defineComponent({\n  setup() {\n    const items = reactive([\n      {\n        title: \"vuex 세분화\",\n        code: codeProcess(`\n        ---- // store/getters.ts\n        import { IState as baseState } from \"@/store/modules/base\";\nimport { gettersParms as baseGettersParms } from \"@/store/modules/base\";\n\n// base\n// 함수 이름 모음\nexport enum BaseGettersTypes {\n  /ttGETTERS_BASE = \"GETTERS_BASE\",\n}\n\n// 함수 타입 \nexport type BaseGetters = {\n  /tt----[BaseGettersTypes.GETTERS_BASE](\n    /tt/tt---- state: baseState\n  /tt---- ): (parms: baseGettersParms) => void;\n};\n\n---- // store/module/base.ts\n// GetterType & getters 함수 타입 을하여\n// 타입 검사\nconst getters: GetterTree<IState, rootState> & BaseGetters = {\n  [BaseGettersTypes.GETTERS_BASE]:\n    /tt----(state: IState) => (payload: gettersParms) => {\n    /tt/tt  console.log(state, payload);\n    /tt----},\n};\n\n\n            ---- // store/mutations.ts\n    // base\nimport { IState as baseState } from \"@/store/modules/base\";\nimport { mutationsParms as baseMuationsParms } from \"@/store/modules/base\";\n\n// 함수 이름 모음\nexport enum BaseMuationsTypes {\n  /ttMUTATIONS_BASE = \"MUTATIONS_BASE\",\n}/tt\n/tt\n// 함수 타입 \nex/ttexport type BaseMutations = {\n  /tt---- [BaseMuationsTypes.MUTATIONS_BASE](\n  /tt/tt---- state: baseState,\n  /tt/tt----  payload: baseMuationsParms\n  /tt---- ): void;\n};\n\n---- // store/module/base.ts\n// MutationsType & Mutations 함수 타입 을하여\n// 타입 검사\nconst mutations: MutationTree<IState> & BaseMutations = {\n  /tt[BaseMuationsTypes.MUTATIONS_BASE]: (\n  /tt/tt  state: IState,\n  /tt/tt  payload: mutationsParms\n  /tt) => {\n  /tt/tt  console.log(state, payload);\n  /tt},\n};\n\n\n        ---- // store/actions.ts\n        import { State as rootState } from \"@/store/index\";\nimport { IState as baseState } from \"@/store/modules/base\";\nimport { actionsParms as baseActionsParms } from \"@/store/modules/base\";\nimport { ActionContext } from \"vuex\";\n\n// base\n// 함수 이름 모음\nexport enum BaseActionsTypes {\n  /ttACTIONS_BASE = \"ACTIONS_BASE\",\n}\n// 함수 타입 \nexport type BaseActions = {\n  /tt----[BaseActionsTypes.ACTIONS_BASE](\n  /tt/tt----  actionContext: ActionContext<baseState, rootState>,\n  /tt/tt----  paylaod: baseActionsParms\n  /tt----): void;\n};\n\n---- // store/module/base.ts\n// ActionsType & Actions 함수 타입 을하여\n// 타입 검사\nconst actions: ActionTree<IState, rootState> & BaseActions = {\n  /tt[BaseActionsTypes.ACTIONS_BASE]: async (\n  /tt/tt  actionsContext: ActionContext<IState, rootState>,\n  /tt/tt  payload: actionsParms\n  /tt) => {\n  /tt/tt  setTimeout(() => {\n  /tt/tt/tt    console.log(payload);\n  /tt/tt  }, 1000);\n  /tt},\n};\n\n\n        `),\n      },\n    ]);\n    return { items };\n  },\n});\n</script>\n\n<style scoped></style>\n","\nimport { defineComponent, reactive } from \"vue\";\nimport { codeProcess } from \"@/components/codeConvert.vue\";\n\nexport default defineComponent({\n  setup() {\n    const items = reactive([\n      {\n        title: \"vuex 세분화\",\n        code: codeProcess(`\n        ---- // store/getters.ts\n        import { IState as baseState } from \"@/store/modules/base\";\nimport { gettersParms as baseGettersParms } from \"@/store/modules/base\";\n\n// base\n// 함수 이름 모음\nexport enum BaseGettersTypes {\n  /ttGETTERS_BASE = \"GETTERS_BASE\",\n}\n\n// 함수 타입 \nexport type BaseGetters = {\n  /tt----[BaseGettersTypes.GETTERS_BASE](\n    /tt/tt---- state: baseState\n  /tt---- ): (parms: baseGettersParms) => void;\n};\n\n---- // store/module/base.ts\n// GetterType & getters 함수 타입 을하여\n// 타입 검사\nconst getters: GetterTree<IState, rootState> & BaseGetters = {\n  [BaseGettersTypes.GETTERS_BASE]:\n    /tt----(state: IState) => (payload: gettersParms) => {\n    /tt/tt  console.log(state, payload);\n    /tt----},\n};\n\n\n            ---- // store/mutations.ts\n    // base\nimport { IState as baseState } from \"@/store/modules/base\";\nimport { mutationsParms as baseMuationsParms } from \"@/store/modules/base\";\n\n// 함수 이름 모음\nexport enum BaseMuationsTypes {\n  /ttMUTATIONS_BASE = \"MUTATIONS_BASE\",\n}/tt\n/tt\n// 함수 타입 \nex/ttexport type BaseMutations = {\n  /tt---- [BaseMuationsTypes.MUTATIONS_BASE](\n  /tt/tt---- state: baseState,\n  /tt/tt----  payload: baseMuationsParms\n  /tt---- ): void;\n};\n\n---- // store/module/base.ts\n// MutationsType & Mutations 함수 타입 을하여\n// 타입 검사\nconst mutations: MutationTree<IState> & BaseMutations = {\n  /tt[BaseMuationsTypes.MUTATIONS_BASE]: (\n  /tt/tt  state: IState,\n  /tt/tt  payload: mutationsParms\n  /tt) => {\n  /tt/tt  console.log(state, payload);\n  /tt},\n};\n\n\n        ---- // store/actions.ts\n        import { State as rootState } from \"@/store/index\";\nimport { IState as baseState } from \"@/store/modules/base\";\nimport { actionsParms as baseActionsParms } from \"@/store/modules/base\";\nimport { ActionContext } from \"vuex\";\n\n// base\n// 함수 이름 모음\nexport enum BaseActionsTypes {\n  /ttACTIONS_BASE = \"ACTIONS_BASE\",\n}\n// 함수 타입 \nexport type BaseActions = {\n  /tt----[BaseActionsTypes.ACTIONS_BASE](\n  /tt/tt----  actionContext: ActionContext<baseState, rootState>,\n  /tt/tt----  paylaod: baseActionsParms\n  /tt----): void;\n};\n\n---- // store/module/base.ts\n// ActionsType & Actions 함수 타입 을하여\n// 타입 검사\nconst actions: ActionTree<IState, rootState> & BaseActions = {\n  /tt[BaseActionsTypes.ACTIONS_BASE]: async (\n  /tt/tt  actionsContext: ActionContext<IState, rootState>,\n  /tt/tt  payload: actionsParms\n  /tt) => {\n  /tt/tt  setTimeout(() => {\n  /tt/tt/tt    console.log(payload);\n  /tt/tt  }, 1000);\n  /tt},\n};\n\n\n        `),\n      },\n    ]);\n    return { items };\n  },\n});\n","import { render } from \"./파일정리.vue?vue&type=template&id=c1863eee\"\nimport script from \"./파일정리.vue?vue&type=script&lang=ts\"\nexport * from \"./파일정리.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}