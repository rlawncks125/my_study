{"version":3,"sources":["webpack:///./src/views/SCSS-views/내장함수.vue","webpack:///./src/views/SCSS-views/내장함수.vue?1f65","webpack:///./src/views/SCSS-views/내장함수.vue?5724"],"names":["class","items","item","key","id","title","content","code","setup","render"],"mappings":"yIACE,eAAoC,MAAhCA,MAAM,YAAW,cAAU,G,EAC/B,eAAM,mB,EACN,eAAM,mB,iHAFN,EACA,EACA,G,mBACA,eAMM,2BANc,EAAAC,OAAK,SAAbC,G,wBAAZ,eAMM,OANsBC,IAAKD,EAAKE,I,CACpC,eAIe,QAHFC,MAAK,gBAAC,iBAAgB,C,8BAAbH,EAAKG,OAAK,OACnBC,QAAO,gBAAC,iBAAkB,C,8BAAfJ,EAAKI,SAAO,OACvBC,KAAI,gBAAC,iBAAe,C,8BAAZL,EAAKK,MAAI,O,2CCJnB,iBAAgB,CAC7BC,MAD6B,WAE3B,IAAMP,EAAQ,eAAS,CACrB,CACEI,MAAO,6BACPE,KAAM,eAAY,0eAoBpB,CACEF,MAAO,gBACPE,KAAM,eAAY,+XAcpB,CACEF,MAAO,gBACPE,KAAM,eAAY,mSAgBpB,CACEF,MAAO,UACPE,KAAM,eAAY,uZAepB,CACEF,MAAO,SACPE,KAAM,eAAY,+QAUpB,CACEF,MAAO,uBACPE,KAAM,eAAY,kOAStB,MAAO,CAAEN,YCpGb,EAAOQ,OAASA,EAED","file":"js/chunk-2d22db3a.0d917005.js","sourcesContent":["<template>\n  <h1 class=\"div-line\">SCSS 내장 함수</h1>\n  <hr />\n  <br />\n  <div v-for=\"item in items\" :key=\"item.id\">\n    <code-convert>\n      <template #title>{{ item.title }} </template>\n      <template #content>{{ item.content }}</template>\n      <template #code>{{ item.code }} </template>\n    </code-convert>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, reactive } from \"vue\";\nimport { codeProcess } from \"@/components/codeConvert.vue\";\n\nexport default defineComponent({\n  setup() {\n    const items = reactive([\n      {\n        title: \"색상(RGB / HSL / Opacity) 함수\",\n        code: codeProcess(`mix($color1, $color2) : 두 개의 색을 섞습니다.\n\nlighten($color, $amount) : 더 밝은색을 만듭니다.\n\ndarken($color, $amount) : 더 어두운색을 만듭니다.\n\nsaturate($color, $amount) : 색상의 채도를 올립니다.\n\ndesaturate($color, $amount) : 색상의 채도를 낮춥니다.\n\ngrayscale($color) : 색상을 회색으로 변환합니다.\n\ninvert($color) : 색상을 반전시킵니다.\n\nrgba($color, $alpha) : 색상의 투명도를 변경합니다.\n\nopacify($color, $amount) / fade-in($color, $amount) : 색상을 더 불투명하게 만듭니다.\n\ntransparentize($color, $amount) / fade-out($color, $amount) : 색상을 더 투명하게 만듭니다.`),\n      },\n      {\n        title: \"문자(String) 함수\",\n        code: codeProcess(`unquote($string) : 문자에서 따옴표를 제거합니다.\n\nquote($string) : 문자에 따옴표를 추가합니다.\n\nstr-insert($string, $insert, $index) : 문자의 index번째에 특정 문자를 삽입합니다.\n\nstr-index($string, $substring) : 문자에서 특정 문자의 첫 index를 반환합니다.\n\nstr-slice($string, $start-at, [$end-at]) : 문자에서 특정 문자(몇 번째 글자부터 몇 번째 글자까지)를 추출합니다.\n\nto-upper-case($string) : 문자를 대문자를 변환합니다.\n\nto-lower-case($string) : 문자를 소문자로 변환합니다.`),\n      },\n      {\n        title: \"숫자(Number) 함수\",\n        code: codeProcess(`percentage($number) : 숫자(단위 무시)를 백분율로 변환합니다.\n\nround($number) : 정수로 반올림합니다.\n\nceil($number) : 정수로 올림합니다.\n\nfloor($number) : 정수로 내림(버림)합니다.\n\nabs($number) : 숫자의 절대 값을 반환합니다.\n\nmin($numbers…) : 숫자 중 최소 값을 찾습니다.\n\nmax($numbers…) : 숫자 중 최대 값을 찾습니다.\n\nrandom() : 0 부터 1 사이의 난수를 반환합니다.`),\n      },\n      {\n        title: \"List 함수\",\n        code: codeProcess(`----모든 List 내장 함수는 기존 List 데이터를 갱신하지 않고 새 List 데이터를 반환합니다.\n----모든 List 내장 함수는 Map 데이터에서도 사용할 수 있습니다.\n\nlength($list) : List의 개수를 반환합니다.\n\nnth($list, $n) : List에서 n번째 값을 반환합니다.\n\nset-nth($list, $n, $value) : List에서 n번째 값을 다른 값으로 변경합니다.\n\njoin($list1, $list2, [$separator]) : 두 개의 List를 하나로 결합합니다.\n\nzip($lists…) : 여러 List들을 하나의 다차원 List로 결합합니다.\n\nindex($list, $value) : List에서 특정 값의 index를 반환합니다.`),\n      },\n      {\n        title: \"Map 함수\",\n        code: codeProcess(`---- 모든 Map 내장 함수는 기존 Map 데이터를 갱신하지 않고 새 Map 데이터를 반환합니다.\n\nmap-get($map, $key) : Map에서 특정 key의 value를 반환합니다.\n\nmap-merge($map1, $map2) : 두 개의 Map을 병합하여 새로운 Map를 만듭니다.\n\nmap-keys($map) : Map에서 모든 key를 List로 반환합니다.\n\nmap-values($map) : Map에서 모든 value를 List로 반환합니다.`),\n      },\n      {\n        title: \"관리(Introspection) 함수\",\n        code: codeProcess(`variable-exists(name) : 변수가 현재 범위에 존재하는지 여부를 반환합니다.(인수는 $없이 변수의 이름만 사용합니다.)\n\nunit($number) : 숫자의 단위를 반환합니다.\n\nunitless($number) : 숫자에 단위가 있는지 여부를 반환합니다.\n\ncomparable($number1, $number2) : 두 개의 숫자가 연산 가능한지 여부를 반환합니다.`),\n      },\n    ]);\n    return { items };\n  },\n});\n</script>\n\n<style scoped></style>\n","\nimport { defineComponent, reactive } from \"vue\";\nimport { codeProcess } from \"@/components/codeConvert.vue\";\n\nexport default defineComponent({\n  setup() {\n    const items = reactive([\n      {\n        title: \"색상(RGB / HSL / Opacity) 함수\",\n        code: codeProcess(`mix($color1, $color2) : 두 개의 색을 섞습니다.\n\nlighten($color, $amount) : 더 밝은색을 만듭니다.\n\ndarken($color, $amount) : 더 어두운색을 만듭니다.\n\nsaturate($color, $amount) : 색상의 채도를 올립니다.\n\ndesaturate($color, $amount) : 색상의 채도를 낮춥니다.\n\ngrayscale($color) : 색상을 회색으로 변환합니다.\n\ninvert($color) : 색상을 반전시킵니다.\n\nrgba($color, $alpha) : 색상의 투명도를 변경합니다.\n\nopacify($color, $amount) / fade-in($color, $amount) : 색상을 더 불투명하게 만듭니다.\n\ntransparentize($color, $amount) / fade-out($color, $amount) : 색상을 더 투명하게 만듭니다.`),\n      },\n      {\n        title: \"문자(String) 함수\",\n        code: codeProcess(`unquote($string) : 문자에서 따옴표를 제거합니다.\n\nquote($string) : 문자에 따옴표를 추가합니다.\n\nstr-insert($string, $insert, $index) : 문자의 index번째에 특정 문자를 삽입합니다.\n\nstr-index($string, $substring) : 문자에서 특정 문자의 첫 index를 반환합니다.\n\nstr-slice($string, $start-at, [$end-at]) : 문자에서 특정 문자(몇 번째 글자부터 몇 번째 글자까지)를 추출합니다.\n\nto-upper-case($string) : 문자를 대문자를 변환합니다.\n\nto-lower-case($string) : 문자를 소문자로 변환합니다.`),\n      },\n      {\n        title: \"숫자(Number) 함수\",\n        code: codeProcess(`percentage($number) : 숫자(단위 무시)를 백분율로 변환합니다.\n\nround($number) : 정수로 반올림합니다.\n\nceil($number) : 정수로 올림합니다.\n\nfloor($number) : 정수로 내림(버림)합니다.\n\nabs($number) : 숫자의 절대 값을 반환합니다.\n\nmin($numbers…) : 숫자 중 최소 값을 찾습니다.\n\nmax($numbers…) : 숫자 중 최대 값을 찾습니다.\n\nrandom() : 0 부터 1 사이의 난수를 반환합니다.`),\n      },\n      {\n        title: \"List 함수\",\n        code: codeProcess(`----모든 List 내장 함수는 기존 List 데이터를 갱신하지 않고 새 List 데이터를 반환합니다.\n----모든 List 내장 함수는 Map 데이터에서도 사용할 수 있습니다.\n\nlength($list) : List의 개수를 반환합니다.\n\nnth($list, $n) : List에서 n번째 값을 반환합니다.\n\nset-nth($list, $n, $value) : List에서 n번째 값을 다른 값으로 변경합니다.\n\njoin($list1, $list2, [$separator]) : 두 개의 List를 하나로 결합합니다.\n\nzip($lists…) : 여러 List들을 하나의 다차원 List로 결합합니다.\n\nindex($list, $value) : List에서 특정 값의 index를 반환합니다.`),\n      },\n      {\n        title: \"Map 함수\",\n        code: codeProcess(`---- 모든 Map 내장 함수는 기존 Map 데이터를 갱신하지 않고 새 Map 데이터를 반환합니다.\n\nmap-get($map, $key) : Map에서 특정 key의 value를 반환합니다.\n\nmap-merge($map1, $map2) : 두 개의 Map을 병합하여 새로운 Map를 만듭니다.\n\nmap-keys($map) : Map에서 모든 key를 List로 반환합니다.\n\nmap-values($map) : Map에서 모든 value를 List로 반환합니다.`),\n      },\n      {\n        title: \"관리(Introspection) 함수\",\n        code: codeProcess(`variable-exists(name) : 변수가 현재 범위에 존재하는지 여부를 반환합니다.(인수는 $없이 변수의 이름만 사용합니다.)\n\nunit($number) : 숫자의 단위를 반환합니다.\n\nunitless($number) : 숫자에 단위가 있는지 여부를 반환합니다.\n\ncomparable($number1, $number2) : 두 개의 숫자가 연산 가능한지 여부를 반환합니다.`),\n      },\n    ]);\n    return { items };\n  },\n});\n","import { render } from \"./내장함수.vue?vue&type=template&id=fb73967c\"\nimport script from \"./내장함수.vue?vue&type=script&lang=ts\"\nexport * from \"./내장함수.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}