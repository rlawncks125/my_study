(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22db3a"],{f92c:function(n,t,e){"use strict";e.r(t);var r=e("7a23"),a=Object(r["g"])("h1",{class:"div-line"},"SCSS 내장 함수",-1),i=Object(r["g"])("hr",null,null,-1),c=Object(r["g"])("br",null,null,-1);function o(n,t,e,o,s,$){var l=Object(r["F"])("code-convert");return Object(r["x"])(),Object(r["f"])(r["a"],null,[a,i,c,(Object(r["x"])(!0),Object(r["f"])(r["a"],null,Object(r["D"])(n.items,(function(n){return Object(r["x"])(),Object(r["f"])("div",{key:n.id},[Object(r["k"])(l,null,{title:Object(r["P"])((function(){return[Object(r["j"])(Object(r["J"])(n.title),1)]})),content:Object(r["P"])((function(){return[Object(r["j"])(Object(r["J"])(n.content),1)]})),code:Object(r["P"])((function(){return[Object(r["j"])(Object(r["J"])(n.code),1)]})),_:2},1024)])})),128))],64)}var s=e("dd39"),$=Object(r["l"])({setup:function(){var n=Object(r["B"])([{title:"색상(RGB / HSL / Opacity) 함수",code:Object(s["a"])("mix($color1, $color2) : 두 개의 색을 섞습니다.\n\nlighten($color, $amount) : 더 밝은색을 만듭니다.\n\ndarken($color, $amount) : 더 어두운색을 만듭니다.\n\nsaturate($color, $amount) : 색상의 채도를 올립니다.\n\ndesaturate($color, $amount) : 색상의 채도를 낮춥니다.\n\ngrayscale($color) : 색상을 회색으로 변환합니다.\n\ninvert($color) : 색상을 반전시킵니다.\n\nrgba($color, $alpha) : 색상의 투명도를 변경합니다.\n\nopacify($color, $amount) / fade-in($color, $amount) : 색상을 더 불투명하게 만듭니다.\n\ntransparentize($color, $amount) / fade-out($color, $amount) : 색상을 더 투명하게 만듭니다.")},{title:"문자(String) 함수",code:Object(s["a"])("unquote($string) : 문자에서 따옴표를 제거합니다.\n\nquote($string) : 문자에 따옴표를 추가합니다.\n\nstr-insert($string, $insert, $index) : 문자의 index번째에 특정 문자를 삽입합니다.\n\nstr-index($string, $substring) : 문자에서 특정 문자의 첫 index를 반환합니다.\n\nstr-slice($string, $start-at, [$end-at]) : 문자에서 특정 문자(몇 번째 글자부터 몇 번째 글자까지)를 추출합니다.\n\nto-upper-case($string) : 문자를 대문자를 변환합니다.\n\nto-lower-case($string) : 문자를 소문자로 변환합니다.")},{title:"숫자(Number) 함수",code:Object(s["a"])("percentage($number) : 숫자(단위 무시)를 백분율로 변환합니다.\n\nround($number) : 정수로 반올림합니다.\n\nceil($number) : 정수로 올림합니다.\n\nfloor($number) : 정수로 내림(버림)합니다.\n\nabs($number) : 숫자의 절대 값을 반환합니다.\n\nmin($numbers…) : 숫자 중 최소 값을 찾습니다.\n\nmax($numbers…) : 숫자 중 최대 값을 찾습니다.\n\nrandom() : 0 부터 1 사이의 난수를 반환합니다.")},{title:"List 함수",code:Object(s["a"])("----모든 List 내장 함수는 기존 List 데이터를 갱신하지 않고 새 List 데이터를 반환합니다.\n----모든 List 내장 함수는 Map 데이터에서도 사용할 수 있습니다.\n\nlength($list) : List의 개수를 반환합니다.\n\nnth($list, $n) : List에서 n번째 값을 반환합니다.\n\nset-nth($list, $n, $value) : List에서 n번째 값을 다른 값으로 변경합니다.\n\njoin($list1, $list2, [$separator]) : 두 개의 List를 하나로 결합합니다.\n\nzip($lists…) : 여러 List들을 하나의 다차원 List로 결합합니다.\n\nindex($list, $value) : List에서 특정 값의 index를 반환합니다.")},{title:"Map 함수",code:Object(s["a"])("---- 모든 Map 내장 함수는 기존 Map 데이터를 갱신하지 않고 새 Map 데이터를 반환합니다.\n\nmap-get($map, $key) : Map에서 특정 key의 value를 반환합니다.\n\nmap-merge($map1, $map2) : 두 개의 Map을 병합하여 새로운 Map를 만듭니다.\n\nmap-keys($map) : Map에서 모든 key를 List로 반환합니다.\n\nmap-values($map) : Map에서 모든 value를 List로 반환합니다.")},{title:"관리(Introspection) 함수",code:Object(s["a"])("variable-exists(name) : 변수가 현재 범위에 존재하는지 여부를 반환합니다.(인수는 $없이 변수의 이름만 사용합니다.)\n\nunit($number) : 숫자의 단위를 반환합니다.\n\nunitless($number) : 숫자에 단위가 있는지 여부를 반환합니다.\n\ncomparable($number1, $number2) : 두 개의 숫자가 연산 가능한지 여부를 반환합니다.")}]);return{items:n}}}),l=e("d959"),u=e.n(l);const b=u()($,[["render",o]]);t["default"]=b}}]);
//# sourceMappingURL=chunk-2d22db3a.3d97eb5a.js.map